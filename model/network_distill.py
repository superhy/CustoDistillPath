import torch
from torch.utils.data import Dataset, DataLoader

import torch.nn as nn
import torchvision.models as models


class DistillationModel(nn.Module):
    def __init__(self, student_model, num_foundation_models, feature_dim_per_model, num_classes):
        super(DistillationModel, self).__init__()
        
        # Student model passed from outside
        self.student = student_model
        
        # Adaptation layer for combined foundation model features
        total_feature_dim = num_foundation_models * feature_dim_per_model
        self.feature_adaptation = nn.Sequential(
            nn.Linear(total_feature_dim, 512),
            nn.ReLU(),
            nn.Linear(512, num_classes)
        )

    def forward(self, images, teacher_features=None):
        """
        Forward pass for the network.
        Args:
            images (torch.Tensor): Input images to be processed by the student model.
            teacher_features (torch.Tensor, optional): Features from the teacher model. 
                Required only during training for distillation purposes.
        Returns:
            torch.Tensor: Features generated by the student model.
            tuple(torch.Tensor, torch.Tensor): If in training mode and `teacher_features` 
                are provided, returns a tuple containing:
                - Features generated by the student model.
                - Adapted features from the teacher model.
        Notes:
            - The 'self.training' attribute is a built-in property of `nn.Module` that 
              indicates whether the model is in training mode (`True`) or evaluation mode (`False`).
            - To switch between training and evaluation modes, use:
                `model.train()` to enable training mode.
                `model.eval()` to enable evaluation mode.
        """
        # Student forward pass
        student_features = self.student(images)
        
        # Check if the model is in training mode and teacher features are provided
        if self.training and teacher_features is not None:
            # Teacher features adaptation
            teacher_outputs = self.feature_adaptation(teacher_features)
            return student_features, teacher_outputs
        
        return student_features